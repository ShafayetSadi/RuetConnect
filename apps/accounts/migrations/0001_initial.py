# Generated by Django 5.2 on 2025-08-11 22:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('student_id', models.CharField(blank=True, help_text='Student ID is required for students', max_length=7, null=True, unique=True)),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty'), ('staff', 'Staff'), ('alumni', 'Alumni')], default='student', max_length=10)),
                ('department', models.CharField(blank=True, choices=[('cse', 'Computer Science & Engineering'), ('eee', 'Electrical & Electronic Engineering'), ('me', 'Mechanical Engineering'), ('ce', 'Civil Engineering'), ('ipe', 'Industrial & Production Engineering'), ('che', 'Chemical Engineering'), ('mte', 'Materials & Metallurgical Engineering'), ('arch', 'Architecture'), ('urp', 'Urban & Regional Planning'), ('math', 'Mathematics'), ('phy', 'Physics'), ('chem', 'Chemistry'), ('hum', 'Humanities')], help_text='Academic department of the user', max_length=10)),
                ('series', models.CharField(blank=True, help_text='Admission year (e.g., 2019)', max_length=4, null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Verified RUET member')),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15)),
                ('address', models.TextField(blank=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='avatars/')),
                ('social_links', models.JSONField(blank=True, default=dict, help_text="Social media links as JSON: {'facebook': 'url', 'linkedin': 'url'}")),
                ('interests', models.JSONField(blank=True, default=list, help_text="List of interests: ['programming', 'robotics']")),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of skills')),
                ('reputation_score', models.IntegerField(default=0)),
                ('show_email', models.BooleanField(default=False)),
                ('show_phone', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_profiles',
                'indexes': [models.Index(fields=['user'], name='user_profil_user_id_fbe33d_idx'), models.Index(fields=['birth_date'], name='user_profil_birth_d_d1bc83_idx'), models.Index(fields=['reputation_score'], name='user_profil_reputat_93e71d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['department', 'series'], name='users_departm_9fc423_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['student_id'], name='users_student_2d3a08_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_verified'], name='users_is_veri_63cd6e_idx'),
        ),
    ]
